import {Injectable, signal} from '@angular/core';
import * as L from 'leaflet';
import { Subject, Observable } from 'rxjs';
import {ColorType, iconUsers} from '@app/utils/leafletMarkers';

@Injectable({
  providedIn: 'root'
})
export class LeafletService {

  private map!: L.Map;
  private _map = signal<L.Map | null>(null);

  private markers: L.LayerGroup = L.layerGroup();
  private color=""

  private mapReadySource = new Subject<L.Map>();
  public mapReady$: Observable<L.Map> = this.mapReadySource.asObservable();

  constructor() { }

  public initMap(mapId: string): void {
    if (!this.map) {
      this.map = L.map(mapId).setView([46.5, 2.5], 6);
      const tiles = L.tileLayer(
        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        {
          maxZoom: 18,
          minZoom: 3,
          attribution:
            '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        }
      );
      tiles.addTo(this.map);
      this.markers.addTo(this.map); // Ajout du groupe de marqueurs à la carte
      this.mapReadySource.next(this.map); // Émet la carte une fois qu'elle est initialisée.
    }
  }

  /**
   * Ajoute un marqueur à la carte.
   */

  public addMarkers(gender:string, lat: number, lng: number, popup: string): void {
    const marker=L.marker([lat, lng], { icon: iconUsers }).bindPopup(popup);
    this.markers.addLayer(marker); // Ajout du marqueur au groupe
  }

  public addCircleMarker(gender:string, lat: number, lng: number, popup: string): void {
    if(gender==='male'){
      this.color=ColorType.MALE
    }else{
      this.color=ColorType.FEMELLE
    }
    const circle= L.circleMarker([lat, lng],{ radius: 20,fillColor:this.color}).bindPopup(popup);
    this.markers.addLayer(circle); // Ajout du marqueur au groupe
  }

  public clearMarkers(): void {
    this.markers.clearLayers(); // Nettoyage des marqueurs
  }

  /**
   * pour sauvergarder l'instance MAP
   * @param map
   */
  setMap(map: L.Map) {
    this._map.set(map);
  }

  map_ = () => this._map();

}
